import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import sv_ttk  # For Windows 11 style
from key_generator import generate_new_keypair, save_keys_to_file, load_keys_from_file
from my_functions import encrypt_message, decrypt_message, save_message_to_file, load_message_from_file
from file_utils import ensure_directory_exists, save_config, load_config
import json
import os

class CryptoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Crypto Manager")
        self.root.geometry("1024x768")
        
        # Apply Windows 11 theme
        sv_ttk.set_theme("dark")  # Modern dark theme
        
        # Configure grid
        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        
        # Main container
        self.main_frame = ttk.Frame(root, padding="20")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.main_frame.columnconfigure(0, weight=1)
        self.main_frame.rowconfigure(0, weight=1)
        
        # Create theme toggle button
        self.theme_button = ttk.Button(
            self.main_frame,
            text="Toggle Theme",
            command=self.toggle_theme,
            style="Accent.TButton"
        )
        self.theme_button.grid(row=0, column=0, sticky="NE", padx=5, pady=5)
        
        # Tabs
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Create tabs
        self.keys_tab = ttk.Frame(self.notebook)
        self.encrypt_tab = ttk.Frame(self.notebook)
        self.decrypt_tab = ttk.Frame(self.notebook)
        
        self.notebook.add(self.keys_tab, text="Key Management")
        self.notebook.add(self.encrypt_tab, text="Encrypt")
        self.notebook.add(self.decrypt_tab, text="Decrypt")
        
        # Setup each tab
        self.setup_keys_tab()
        self.setup_encrypt_tab()
        self.setup_decrypt_tab()
        
        # Current keys
        self.current_public_key = None
        self.current_private_key = None
        
        # Load saved configuration
        self.config = load_config()
        self.current_theme = self.config.get('theme', 'dark')
        
        # Load saved keys if they exist
        self.load_saved_keys()

class CryptoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Crypto Manager")
        self.root.geometry("1024x768")
        
        # Apply Windows 11 theme
        sv_ttk.set_theme("dark")  # Modern dark theme
        
        # Configure grid
        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        
        # Main container
        self.main_frame = ttk.Frame(root, padding="20")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.main_frame.columnconfigure(0, weight=1)
        self.main_frame.rowconfigure(0, weight=1)
        
        # Create theme toggle button
        self.theme_button = ttk.Button(
            self.main_frame,
            text="Toggle Theme",
            command=self.toggle_theme,
            style="Accent.TButton"
        )
        self.theme_button.grid(row=0, column=0, sticky="NE", padx=5, pady=5)
        
        # Tabs
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Load saved configuration
        self.config = load_config()
        self.current_theme = self.config.get('theme', 'dark')
        
        # Create tabs
        self.keys_tab = ttk.Frame(self.notebook)
        self.encrypt_tab = ttk.Frame(self.notebook)
        self.decrypt_tab = ttk.Frame(self.notebook)
        
        self.notebook.add(self.keys_tab, text="Key Management")
        self.notebook.add(self.encrypt_tab, text="Encrypt")
        self.notebook.add(self.decrypt_tab, text="Decrypt")
        
        # Setup each tab
        self.setup_keys_tab()
        self.setup_encrypt_tab()
        self.setup_decrypt_tab()
        
        # Current keys
        self.current_public_key = None
        self.current_private_key = None

    def setup_keys_tab(self):
        # Key Generation Frame
        key_frame = ttk.LabelFrame(self.keys_tab, text="Key Generation", padding="10")
        key_frame.grid(row=0, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))
        
        # Bit length selection
        ttk.Label(key_frame, text="Key Size:").grid(row=0, column=0, padx=5, pady=5)
        self.key_size_var = tk.StringVar(value="2048")
        key_size_combo = ttk.Combobox(key_frame, textvariable=self.key_size_var)
        key_size_combo['values'] = ('1024', '2048', '4096')
        key_size_combo.grid(row=0, column=1, padx=5, pady=5)
        
        # Generate button
        ttk.Button(key_frame, text="Generate New Keypair", 
                  command=self.generate_keys).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Key Display Frame
        display_frame = ttk.LabelFrame(self.keys_tab, text="Current Keys", padding="10")
        display_frame.grid(row=1, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))
        
        # Public key display
        ttk.Label(display_frame, text="Public Key:").grid(row=0, column=0, sticky=tk.W)
        self.public_key_text = tk.Text(display_frame, height=4, width=50)
        self.public_key_text.grid(row=1, column=0, padx=5, pady=5)
        
        # Private key display
        ttk.Label(display_frame, text="Private Key:").grid(row=2, column=0, sticky=tk.W)
        self.private_key_text = tk.Text(display_frame, height=4, width=50)
        self.private_key_text.grid(row=3, column=0, padx=5, pady=5)

    def setup_encrypt_tab(self):
        # Message input
        ttk.Label(self.encrypt_tab, text="Message to encrypt:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        self.encrypt_input = tk.Text(self.encrypt_tab, height=5, width=50)
        self.encrypt_input.grid(row=1, column=0, padx=5, pady=5)
        
        # Encrypt button
        ttk.Button(self.encrypt_tab, text="Encrypt", 
                  command=self.encrypt_message).grid(row=2, column=0, pady=10)
        
        # Result
        ttk.Label(self.encrypt_tab, text="Encrypted result:").grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)
        self.encrypt_output = tk.Text(self.encrypt_tab, height=5, width=50)
        self.encrypt_output.grid(row=4, column=0, padx=5, pady=5)    def setup_decrypt_tab(self):
        # Message input frame
        input_frame = ttk.LabelFrame(self.decrypt_tab, text="Encrypted Message", padding="10")
        input_frame.grid(row=0, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))
        input_frame.columnconfigure(0, weight=1)
        
        # Message input
        ttk.Label(input_frame, text="Message to decrypt:").grid(row=0, column=0, sticky=tk.W)
        self.decrypt_input = tk.Text(input_frame, height=5, width=50)
        self.decrypt_input.grid(row=1, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))
        
        # Buttons frame
        buttons_frame = ttk.Frame(input_frame)
        buttons_frame.grid(row=2, column=0, pady=10)
        
        # Decrypt button
        decrypt_btn = ttk.Button(
            buttons_frame,
            text="Decrypt",
            command=self.decrypt_message,
            style="Accent.TButton"
        )
        decrypt_btn.pack(side=tk.LEFT, padx=5)
        
        # Load button
        load_btn = ttk.Button(
            buttons_frame,
            text="Load Message",
            command=lambda: self.load_message(self.decrypt_input)
        )
        load_btn.pack(side=tk.LEFT, padx=5)
        
        # Result frame
        result_frame = ttk.LabelFrame(self.decrypt_tab, text="Result", padding="10")
        result_frame.grid(row=1, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))
        result_frame.columnconfigure(0, weight=1)
        
        # Result
        ttk.Label(result_frame, text="Decrypted result:").grid(row=0, column=0, sticky=tk.W)
        self.decrypt_output = tk.Text(result_frame, height=5, width=50)
        self.decrypt_output.grid(row=1, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))
        
        # Save result button
        save_btn = ttk.Button(
            result_frame,
            text="Save Result",
            command=lambda: self.save_message(self.decrypt_output.get(1.0, tk.END))
        )
        save_btn.grid(row=2, column=0, pady=10)

    def generate_keys(self):
        try:
            bit_length = int(self.key_size_var.get())
            public_key, private_key = generate_new_keypair(bit_length)
            
            # Save keys
            self.current_public_key = public_key
            self.current_private_key = private_key
            
            # Display keys
            self.public_key_text.delete(1.0, tk.END)
            self.public_key_text.insert(1.0, public_key)
            
            self.private_key_text.delete(1.0, tk.END)
            self.private_key_text.insert(1.0, private_key)
            
            # Automatically save keys
            save_keys_to_file(public_key, private_key)
            
            messagebox.showinfo("Success", "New keypair generated successfully!")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to generate keys: {str(e)}")    def encrypt_message(self):
        if not self.current_public_key:
            messagebox.showerror("Error", "Please generate keys first!")
            return
            
        message = self.encrypt_input.get(1.0, tk.END).strip()
        if not message:
            messagebox.showerror("Error", "Please enter a message to encrypt!")
            return
            
        try:
            encrypted = encrypt_message(self.current_public_key, message)
            
            if encrypted.startswith("Encryption error:"):
                messagebox.showerror("Error", encrypted)
                return
                
            self.encrypt_output.delete(1.0, tk.END)
            self.encrypt_output.insert(1.0, encrypted)
            messagebox.showinfo("Success", "Message encrypted successfully!")
        except Exception as e:
            messagebox.showerror("Error", f"Encryption failed: {str(e)}")

    def decrypt_message(self):
        if not self.current_private_key:
            tk.messagebox.showerror("Error", "Please generate keys first!")
            return
            
        encrypted_message = self.decrypt_input.get(1.0, tk.END).strip()
        decrypted = decrypt_message(self.current_private_key, encrypted_message)
        
        self.decrypt_output.delete(1.0, tk.END)
        self.decrypt_output.insert(1.0, decrypted)

    def toggle_theme(self):
        """Toggle between light and dark theme"""
        if sv_ttk.get_theme() == "dark":
            sv_ttk.use_light_theme()
        else:
            sv_ttk.use_dark_theme()
        
        # Save theme preference
        self.config['theme'] = sv_ttk.get_theme()
        save_config(self.config)

def main():
    root = tk.Tk()
    app = CryptoApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()